import pandas as pd
pd.set_option('display.max_columns', None)
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
import plotly.figure_factory as ff
color_pallet = ["#c05095","#8512a1","#4d0d80","#2f0e53","#b63082"]
data = pd.read_csv("/kaggle/input/telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv")
data.head()
data.info()
values = data["TotalCharges"].unique()

strCounter = 0
for val in values:
    try:
        float(val)
    except:
        print("the wrong val:",val)
        strCounter +=1
if strCounter == 0:
    print("It all integer values")
 data["TotalCharges"].value_counts()[" "]
data["TotalCharges"] =  data["TotalCharges"].replace(" ", np.nan)
data["TotalCharges"] =  data["TotalCharges"].astype("float")
data.info()
data.columns
for column in data.columns:
    if column == "customerID":
        continue
    if data[column].dtype == "O":
        print("Coulmn name:",column)
        print(data[column].value_counts())
        print("-"*50)
data.replace({"No internet service":"No","No phone service":"No"},inplace=True)
data.isnull().sum()
data[data["TotalCharges"].isnull()]
data[data["tenure"]==0]# So we can fill nan value with 0
data.fillna(0,inplace = True)
data.describe(include="all").T
pie = go.Pie(labels=data["Churn"].value_counts().index,
             values=data["Churn"].value_counts().values,
             pull =[.05,0],
            rotation = 10,
            marker_colors=color_pallet[2:])
fig = go.Figure(data=[pie])
fig.update_layout(
     title_text="Churn percentage"
)
fig.show()
gender_churn=(data.groupby(["Churn","gender"])["gender"].count())
gender_churn = gender_churn.reset_index(name='count')
gender_churn
fig = px.bar(
    gender_churn,
    x='gender',
    y='count',
    color='Churn',
    barmode='group',
    text='count',
    title='Churn by Gender',
    color_discrete_sequence= color_pallet[1:]
)



fig.show()
SeniorGB = data.groupby(["Churn","SeniorCitizen"])["gender"].count().reset_index(name="count")


SeniorGB
SeniorGB = data.groupby(["Churn","SeniorCitizen"])["gender"].count().reset_index(name="count")

fig = px.bar(SeniorGB,x="SeniorCitizen",y="count", color="Churn", text="count", color_discrete_sequence= color_pallet[1:],title='Churn by Senior')
fig.show()
fig = px.box(data, x="SeniorCitizen", y="MonthlyCharges", color_discrete_sequence= color_pallet[1:], points="all",title="Seniors monthly cost")
fig.show()
fig = px.box(data, x="Contract", y="MonthlyCharges", color_discrete_sequence= color_pallet, color="SeniorCitizen")
fig.show()
fig = px.box(
    data,
    x="PaymentMethod",
    y="MonthlyCharges",
    color="SeniorCitizen",
    facet_col="Contract",
    color_discrete_sequence=color_pallet
)
fig.show()
sns.histplot(data=data, x="TotalCharges",hue="SeniorCitizen",kde=True,palette= color_pallet,multiple="stack")
plt.show()
fig = px.violin(data, y="tenure", color="SeniorCitizen", box=True,color_discrete_sequence=color_pallet )
fig.show()sns.histplot(data=data, x="tenure",hue="Churn",kde=True,palette= color_pallet,multiple="dodge")
plt.show()
bool_data = data.copy()
bool_cols = []

for col in bool_data.columns:
    if bool_data[col].nunique() == 2:
        unique_vals = bool_data[col].dropna().unique()
        if set(unique_vals).issubset({"Yes", "No"}):
            bool_data[col] = bool_data[col].map({"Yes": True, "No": False})
            bool_cols.append(col)
        elif set(unique_vals).issubset({0, 1, True, False}):
            bool_cols.append(col)

# Step 2: Plot KDE for each Boolean column (based on a numerical column like MonthlyCharges)
for col in bool_cols:
    plt.figure(figsize=(6, 4))
    sns.histplot(data=bool_data, x=col, hue="Churn",palette= color_pallet,multiple="dodge")
    plt.title(f' {col}')

    plt.ylabel('Density')
    # plt.legend(title=col)
    plt.tight_layout()
    plt.show()
internet_seniorGB = data.groupby(["InternetService","Churn"])["Churn"].count().reset_index(name="count")


fig = px.bar(
    internet_seniorGB,
    x='count',
    y='InternetService',
    color='Churn',
    barmode='group',
    text='Churn',
    title='Churn by Internt Service ',
    color_discrete_sequence= color_pallet[1:]
)



fig.show()
internet_monthGB = data.groupby(["InternetService"])["MonthlyCharges"].mean().reset_index(name="MonthlyCharges mean")


fig = px.bar(
    internet_monthGB,
    x='MonthlyCharges mean',
    y='InternetService',
    color='InternetService',
    barmode='group',
    title='MonthlyCharges mean by internetService',
    color_discrete_sequence= color_pallet
)



fig.show()
